import os
import re
import random
from pathlib import Path
from vunit import VUnit, VUnitCLI


def parse_port_names(filename):
    p = re.compile(r".*\s:\s[in|out].*")
    port_names = []
    with open(filename, "r") as f:
        for line in f.readlines():
            if p.match(line.strip()):
                port_names.append(line.split(":")[0].strip())
    return port_names


def parse_signal_names(filename):
    p = re.compile(r"\bsignal.*:.*:=.*;")
    signal_names = []
    with open(filename, "r") as f:
        for line in f.readlines():
            if p.match(line.strip()):
                signal_names.append(line.split(":")[0].split("signal")[1].strip())
    return signal_names


def generate_waveform_file(filename):
    lines = ["# THIS IS AUTOGENERATED CODE\n"]

    lines.append("set signals [list]\n")
    for signal in parse_signal_names("tb_spi_master.vhd"):
        lines.append(f'lappend signals "{signal}"\n')
    for port in parse_port_names(os.path.join("..", "spi_master.vhd")):
        lines.append(f'lappend signals "e_dut.{port}"\n')
    for signal in parse_signal_names(os.path.join("..", "spi_master.vhd")):
        lines.append(f'lappend signals "e_dut.{signal}"\n')

    lines.append("gtkwave::addSignalsFromList $signals\n")

    with open(filename, "w") as f:
        f.writelines(lines)


cli = VUnitCLI()
cli.parser.add_argument(
    "--warn",
    action="store_true",
    help="If this argument is present, errors of VUnit checkers are treated "
    "as warnings and the simulation continues even if checks fail.",
)
cli.parser.add_argument(
    "--seed",
    type=int,
    help="Set the random seed. By default, this is a random number",
    default=0,
)
cli.parser.add_argument(
    "--timeout",
    type=int,
    help="Set the VUnit watchdog timeout in microseconds.",
    default=50,
)
cli.parser.add_argument(
    "--divide_half", type=int, help="Set max_n_sclk_divide_half.", default=3
)
cli.parser.add_argument("--bits", type=int, help="Set max_n_bits.", default=3)
cli.parser.add_argument(
    "--scs_to_sclk", type=int, help="Set max_n_clks_scs_to_sclk.", default=3
)
cli.parser.add_argument(
    "--sclk_to_scs", type=int, help="Set max_n_clks_sclk_to_scs.", default=3
)
cli.parser.add_argument(
    "--sclk_to_le", type=int, help="Set max_n_clks_sclk_to_le.", default=3
)
cli.parser.add_argument(
    "--le_width", type=int, help="Set max_n_clks_le_width.", default=3
)
cli.parser.add_argument(
    "--rx_delay", type=int, help="Set max_n_clks_rx_sample_strobes_delay.", default=0
)
cli.parser.add_argument(
    "--scs_idle_state", type=int, help="Set scs_idle_state.", default=1
)
cli.parser.add_argument(
    "--sclk_idle_state", type=int, help="Set sclk_idle_state.", default=1
)
cli.parser.add_argument(
    "--leading_edge", type=int, help="Set transmit_on_sclk_leading_edge.", default=1
)

args = cli.parse_args()

vu = VUnit.from_args(args=args)

vu.add_vhdl_builtins()
vu.add_osvvm()

spi_lib = vu.add_library("spi_lib")
spi_lib.add_source_files(Path(__file__).parent / "*.vhd")
spi_lib.add_source_files(Path(__file__).parent.parent / "*.vhd")

tb = spi_lib.test_bench("tb_spi_master")

seed = random.randint(1_000_000, 9_999_999)
if args.seed > 0:
    seed = args.seed
random.seed(seed)

timeout = "50 us"

test = tb.test("00_simple_case")
test.add_config(
    name=f"seed={seed}",
    generics={
        "g_rng_seed": args.seed,
        "g_sclk_idle_state": f"'{args.sclk_idle_state}'",
        "g_scs_idle_state": f"'{args.scs_idle_state}'",
        "g_transmit_on_sclk_leading_edge": f"'{args.leading_edge}'",
        "g_max_n_clks_scs_to_sclk": args.scs_to_sclk,
        "g_max_n_clks_sclk_to_scs": args.sclk_to_scs,
        "g_max_n_bits": args.bits,
        "g_max_sclk_divide_half": args.divide_half,
        "g_max_n_clks_sclk_to_le": args.sclk_to_le,
        "g_max_n_clks_le_width": args.le_width,
        "g_max_n_clks_rx_sample_strobes_delay": args.rx_delay,
        "g_watchdog_timeout": timeout,
    },
)

upper = 50
scs_to_sclk = random.randint(1, upper)
bits = random.randint(1, upper)
divide_half = random.randint(1, upper)
sclk_to_scs = random.randint(1, upper)
sclk_to_le = random.randint(1, upper)
le_width = random.randint(1, upper)
rx_delay = random.randint(0, upper)

timeout = "50 ms"
if args.timeout > 50_000:
    timeout = f"{args.timeout} us"

if not args.list:
    print("--- random parameters of 01_random_coverage ---")
    print("  scs_to_sclk =", scs_to_sclk)
    print("  bits =", bits)
    print("  divide_half =", divide_half)
    print("  sclk_to_scs =", sclk_to_scs)
    print("  sclk_to_le =", sclk_to_le)
    print("  le_width =", le_width)
    print("  rx_delay =", rx_delay)

test = tb.test("01_random_coverage")
test.add_config(
    name=f"seed={seed}",
    generics={
        "g_rng_seed": seed,
        "g_max_n_clks_scs_to_sclk": scs_to_sclk,
        "g_max_n_clks_sclk_to_scs": sclk_to_scs,
        "g_max_n_bits": bits,
        "g_max_sclk_divide_half": divide_half,
        "g_max_n_clks_sclk_to_le": sclk_to_le,
        "g_max_n_clks_le_width": le_width,
        "g_max_n_clks_rx_sample_strobes_delay": rx_delay,
        "g_watchdog_timeout": timeout,
    },
)

if args.warn:
    for test in tb.get_tests():
        test.set_generic("g_warning", True)

waveform_filename = "waveform_autogenerated.tcl"
generate_waveform_file(waveform_filename)

vu.set_sim_option(
    "ghdl.gtkwave_script.gui", str(Path(__file__).parent / waveform_filename)
)
vu.set_sim_option(
    "nvc.gtkwave_script.gui", str(Path(__file__).parent / waveform_filename)
)
vu.set_sim_option(
    "rivierapro.init_file.gui", str(Path(__file__).parent / "waveform_rivierapro.tcl")
)

vu.main()
